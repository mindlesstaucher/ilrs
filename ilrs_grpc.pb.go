// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: ilrs.proto

package ilrs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LrsServiceClient is the client API for LrsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LrsServiceClient interface {
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
}

type lrsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLrsServiceClient(cc grpc.ClientConnInterface) LrsServiceClient {
	return &lrsServiceClient{cc}
}

func (c *lrsServiceClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/ilrs.LrsService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LrsServiceServer is the server API for LrsService service.
// All implementations must embed UnimplementedLrsServiceServer
// for forward compatibility
type LrsServiceServer interface {
	GetVersion(context.Context, *Empty) (*Version, error)
	mustEmbedUnimplementedLrsServiceServer()
}

// UnimplementedLrsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLrsServiceServer struct {
}

func (UnimplementedLrsServiceServer) GetVersion(context.Context, *Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedLrsServiceServer) mustEmbedUnimplementedLrsServiceServer() {}

// UnsafeLrsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LrsServiceServer will
// result in compilation errors.
type UnsafeLrsServiceServer interface {
	mustEmbedUnimplementedLrsServiceServer()
}

func RegisterLrsServiceServer(s grpc.ServiceRegistrar, srv LrsServiceServer) {
	s.RegisterService(&LrsService_ServiceDesc, srv)
}

func _LrsService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LrsServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ilrs.LrsService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LrsServiceServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LrsService_ServiceDesc is the grpc.ServiceDesc for LrsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LrsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ilrs.LrsService",
	HandlerType: (*LrsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _LrsService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ilrs.proto",
}
